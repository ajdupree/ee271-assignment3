//
//---------------------------------------------------------------------------
//  THIS FILE WAS AUTOMATICALLY GENERATED BY THE STANFORD GENESIS2 ENGINE
//  FOR MORE INFORMATION, CONTACT OFER SHACHAM FROM THE STANFORD VLSI GROUP
//  THIS VERSION OF GENESIS2 IS NOT TO BE USED FOR ANY COMMERCIAL USE
//---------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11012 $ --- $Date: 2012/09/13 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/ir.stanford.edu/users/a/j/ajdupree/assignment3/verif/testbench.vp
//  Source template: testbench
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter Radix 	= 10
// Parameter PipesBox 	= 4
// Parameter Axis 	= 3
// Parameter DUT_obj 	= Data structure of type rast
// Parameter PipesIter 	= 1
// Parameter PipesHash 	= 2
// Parameter PipesSamp 	= 4
// Parameter Vertices 	= 3
// Parameter Colors 	= 3
// Parameter SigFig 	= 24
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

 /*   Simulation bench for Hider
  * 
  *   Author: John Brunhaver, Ofer Shacham
  *   Created:          09/21/09
  *   Last Updated:     10/06/10
  *
  *   Copyright 2009 <jbrunhaver@gmail.com>  <shacham@stanford.edu> 
  */
  
/* ***************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 20, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
// SigFig (_GENESIS2_INHERITANCE_PRIORITY_) = 24
//
// Radix (_GENESIS2_INHERITANCE_PRIORITY_) = 10
//
// Vertices (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// Axis (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// Colors (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// PipesBox (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// PipesIter (_GENESIS2_INHERITANCE_PRIORITY_) = 1
//
// PipesHash (_GENESIS2_INHERITANCE_PRIORITY_) = 2
//
// PipesSamp (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// DUT_obj (_GENESIS2_INHERITANCE_PRIORITY_) = 
//	InstancePath:top_rast.rast (rast)
//


//Environment Constants
   
//Environment Constants


module testbench_unq1 
(
     // Output Signals (to DUT inputs)
     output logic signed   [24-1:0]  poly_R10S[3-1:0][3-1:0] , // Poly Position
     output logic unsigned [24-1:0]  color_R10U[3-1:0] ,         // Color of Poly
     output logic 	                isQuad_R10H ,                    // Is Poly Quad?
     output logic 	                validPoly_R10H ,                 // Valid Data for Operation

     // Output Control Signals (to DUT inputs)
     output logic signed [24-1:0]    screen_RnnnnS[1:0] , // Screen Dimensions
     output logic        [3:0]   	subSample_RnnnnU ,   // SubSample_Interval

     // Global Signals 
     input logic                        clk,                 // Clock 
     output logic                        rst,                 // Reset

     // Input Control Signals (from DUT outputs)
     input logic                       halt_RnnnnL,
		 input logic											 poly_R13S,
 
     // Input Signals (from DUT outputs)
     input logic signed   [24-1:0] hit_R18S[3-1:0],       // Hit Location
     input logic unsigned [24-1:0] color_R18U[3-1:0] ,  // Color of Poly 
     input logic                       hit_valid_R18H            // Is this a hit?
);

   // Some simulation variables
   int seed;
   int timeout;
   int dummy; // for random number generator initialization
   string  testname;

   int ss_w_lg2_RnnnnS;

   //BENCH Logical Signals
   logic 		       test_finish;
    
   
   /*****************************************
   *
   * Instance Driver
   * 
   *****************************************/
   
   //probably need to fix....
   rast_driver_unq1  rast_driver (
      .halt_RnnnnL(top_rast.rast.halt_RnnnnL) ,  // Input:  Indicates No Work Should Be Done

      .validPoly_R13H(top_rast.rast.validPoly_R13H) ,  // Input: indicates state of BBox output 

			.poly_R10S(poly_R10S) ,                // Output: 4 Sets X,Y Fixed Point Values
      .isQuad_R10H(isQuad_R10H)  ,           // Output: Is Poly Quad?
      .color_R10U(color_R10U) ,              // Output: Color of Polygon
      .validPoly_R10H(validPoly_R10H),       // Output: Valid Data for Operation
      .screen_RnnnnS(screen_RnnnnS) ,        // Output: Screen Dimensions
      .subSample_RnnnnU(subSample_RnnnnU),   // Output: SubSample_Interval
      .ss_w_lg2_RnnnnS(ss_w_lg2_RnnnnS),     // Output: SubSample_Interval

      .clk(clk),                             // Input:  Clock 
      .rst(rst)                              // Input:  Reset
      );

   
   /******************************************
   * 
   * ZBuff Model
   * 
   ******************************************/
    
    zbuff_unq1  zbuff (
      .clk(clk),                // Clock 
      .rst(rst),                // Reset
      
      .screen_RnnnnS(screen_RnnnnS) ,        // Output: Screen Dimensions
      .subSample_RnnnnU(subSample_RnnnnU),   // Output: SubSample_Interval
      .ss_w_lg2_RnnnnS(ss_w_lg2_RnnnnS),
      
     .hit_R18S(hit_R18S),             //Sample Location and depth
      .color_R18U(color_R18U),         //Color of Sample Hit
      .hit_valid_R18H(hit_valid_R18H)  //Is sample hit valid
      );

   
   /*****************************************
   *
   * Instance Scoreboards
   * 
   *****************************************/
    
   bbx_sb_unq1  bbx_sb (
		   .poly_R10S(poly_R10S) ,                      // Input: 4 Sets X,Y Fixed Point Values
		   .validPoly_R10H(validPoly_R10H),             // Input: Valid Polygon
	   	   .isQuad_R10H(isQuad_R10H) ,                  // Input: Is Poly Quad?

		   .poly_R13S(top_rast.rast.poly_R13S) ,            // Input: 4 Sets X,Y Fixed Point Values
		   .box_R13S(top_rast.rast.box_R13S),		// Input: Bound Box
		   .validPoly_R13H(top_rast.rast.validPoly_R13H) ,  // Input: Valid Data for Operation
		   .isQuad_R13H(top_rast.rast.isQuad_R13H) ,        // Input: Is Poly Quad?
			       .invalidate_R10H(top_rast.rast.bbox.invalidate_R10H),
		   
		   .clk(clk),                                   // Input: Clock 
		   .rst(rst),                                   // Input: Reset
		   
		   .halt_RnnnnL(top_rast.rast.halt_RnnnnL),         // Input: Halt Signal			
		   .screen_RnnnnS(screen_RnnnnS),               // Screen Size
	           .subSample_RnnnnU (subSample_RnnnnU)         // Flag for subsample
							       
		   );
 
   smpl_sb_unq1  smpl_sb (
	 		 .poly_R16S(top_rast.rast.poly_R16S),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(top_rast.rast.color_R16U),         // Polygon Color
			 .isQuad_R16H(top_rast.rast.isQuad_R16H),       // Is Poly Quad?
		 	 .validSamp_R16H(top_rast.rast.validSamp_R16H), 
			 .sample_R16S(top_rast.rast.sample_R16S),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S),
			 .color_R18U(color_R18U),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H) 
								   
			  );
			  
			  
   smpl_cnt_sb_unq1  smpl_cnt_sb (
	 		 .poly_R16S(top_rast.rast.poly_R16S),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(top_rast.rast.color_R16U),         // Polygon Color
			 .isQuad_R16H(top_rast.rast.isQuad_R16H),       // Is Poly Quad?
		 	 .validSamp_R16H(top_rast.rast.validSamp_R16H), 
			 .sample_R16S(top_rast.rast.sample_R16S),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S),
			 .color_R18U(color_R18U),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H) ,

		 	 .screen_RnnnnS(screen_RnnnnS),         // Screen Size
	                 .subSample_RnnnnU(subSample_RnnnnU),    // Flag for subsample
							   
			 .s_x_RnnS(top_rast.rast.hash_jtree.sample_R14S[0]) ,
                         .s_y_RnnS(top_rast.rast.hash_jtree.sample_R14S[1]) ,
                         .jitter_x_RnnS(top_rast.rast.hash_jtree.jitt_val_R14H[0]) ,
                         .jitter_y_RnnS(top_rast.rast.hash_jtree.jitt_val_R14H[1]) ,  
			 .s_j_x_RnnS(top_rast.rast.hash_jtree.sample_jitted_R14S[0]),
			 .s_j_y_RnnS(top_rast.rast.hash_jtree.sample_jitted_R14S[1])

			 );
			 
			 
	/*****************************************
   *
   * Instance Monitors
   * 
   *****************************************/
   
   perf_monitor_unq1  perf_mon (
			 .poly_R10S(top_rast.rast.poly_R10S),           // 
	 		 .poly_R16S(top_rast.rast.poly_R16S),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(top_rast.rast.color_R16U),         // Polygon Color
			 .isQuad_R16H(top_rast.rast.isQuad_R16H),       // Is Poly Quad?
		 	 .validSamp_R16H(top_rast.rast.validSamp_R16H), 
			 .sample_R16S(top_rast.rast.sample_R16S),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S),
			 .color_R18U(top_rast.rast.color_R18U),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H) 
									   );
									   
									   
   
		
		
		
		  

   /*****************************************
    * Main simulation task
    *****************************************/
   initial begin
      rst = 1'b1;    
      rast_driver.InitLines();
      
      $display("time=%10t ************** Loading Arguments *****************", $time);
      ProcessArgs();
       $display("Seed=%d ", seed);
      dummy = $random(seed); // initial the random number generator
      repeat (15) @(posedge clk);

      rast_driver.testname = testname; // tell the driver what to drive
      rast_driver.InitTest();
      repeat (15) @(posedge clk);

      zbuff.init_buffers();
      repeat (15) @(posedge clk);
      
      $display("time=%10t ************** Runnning Test *****************", $time);
      rst = 1'b0;

      if ($test$plusargs("af")) begin
	 $toggle_start(); //start activity factor extraction
      end

      rast_driver.testname = testname; // tell the driver what to drive
      rast_driver.RunTest(); // Tell the driver to start
      
      while (!rast_driver.TestFinish) // wait for driver to finish
	@(posedge clk);
      repeat (15) @(posedge clk);

      if ($test$plusargs("af")) begin
	 $toggle_stop(); //activity factor extraction end
      end  
      
      zbuff.write_image();

       if ($test$plusargs("af")) begin
	  $display("time=%10t ******* Printing AF Extraction *********\n",$time);
	  $toggle_report("af_extraction.saif",1.0e-9,top_rast.rast);	  
       end  
      
      $display("time=%10t ********************FINISH***********************", $time);
      $display("Cycles: %d uPoly: %d sampleTests: %d sampleHits: %d \n" ,
	       perf_mon.cycle_count  , perf_mon.micropolygon_count ,
	       perf_mon.sample_count , perf_mon.sample_hit_count );
      $display("JJ: uPoly / cycle : %f " , (1.0*perf_mon.micropolygon_count)/
	       (1.0* perf_mon.cycle_count));
      $display("JJ: cycle / uPoly : %f " , 
	       (1.0* perf_mon.cycle_count)/
	       (1.0*perf_mon.micropolygon_count) );   
   
      //Call Function for Zbuff write out.
      $finish(2);
   end // initial begin

   // Timeout mechanism
   initial begin
      repeat(timeout) @(posedge clk);
       $display("time=%10t ***************** ERROR: TIMEOUT  *******************", $time);     
      $finish(2);
   end
   
   
   
   
   
   /****************************************************************************
    * Auxiliary Tasks:
    * *************************************************************************/
   task ProcessArgs;
      begin
         // if this is a "+wave" run, it must record all signals
         if ( $test$plusargs("wave") ) begin
            //         levels  instance
            $display("time=%10t Starting Wave Capture", $time);
            /*
	    $vcdpluson(0,top_rast.rast); //
            $vcdpluson(0,rast_driver); //
            $vcdpluson(0,bbox_scoreboard); //
            $vcdpluson(0,sampletest_scoreboard); //
            $vcdpluson(0,sampletest_count_scoreboard); //
            
	    $vcdplusmemon(0,top_rast.rast);
	    $vcdplusmemon(0,rast_driver); //
            $vcdplusmemon(0,bbox_scoreboard); //
            $vcdplusmemon(0,sampletest_scoreboard); //
            $vcdplusmemon(0,sampletest_count_scoreboard); //

	    $vcdplusmemon(0,zbuff.hit_R18S); //
	    $vcdplusmemon(0,zbuff.color_R18U); //
	    $vcdplusmemon(0,zbuff.color); //
	    $vcdpluson(0,zbuff); //
            */
	    $vcdplusmemon(0);
	    $vcdpluson(0);

         end // if ( $test$plusargs("wave") )
	 if ( $test$plusargs("af") ) begin
	    $set_gate_level_monitoring("rtl_on");
	    $set_toggle_region( top_rast.rast ); //select scope for aqctivity factor extraction
	 end
         // look for +seed+12345 runtime args
         if ($test$plusargs("seed")) begin
	    $value$plusargs("seed=%d", seed);
	    $display("Simulation will run with random seed=%0d", seed);
         end
         else begin
	    seed=12345;
	    $display("Simulation run with default random seed=%0d", seed);
	 end

         // look for +timout+1000 runtime args
         if ($test$plusargs("timeout")) begin
	    $value$plusargs("timeout=%d", timeout);
	    $display("Simulation will timout after %0d cycles", timeout);
         end
         else begin
	    timeout=50000000 ;
	    $display("Simulation will timout after %0d cycles", timeout);
	 end

	 // look for +testname=sample_test.dat type of argument
         if ($test$plusargs("testname")) begin
	    $value$plusargs("testname=%s", testname);
	    $display("Simulation will use test file %s", testname);
         end
         else begin
	    testname="tests/sample_test.dat";
	    $display("Simulation will use test file %s", testname);
	 end
	 
      end
   endtask // ProcessArgs
   /****************************************************************************
    * Auxiliary Tasks:
    * *************************************************************************/

endmodule 
