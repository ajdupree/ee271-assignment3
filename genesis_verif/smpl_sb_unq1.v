//
//---------------------------------------------------------------------------
//  THIS FILE WAS AUTOMATICALLY GENERATED BY THE STANFORD GENESIS2 ENGINE
//  FOR MORE INFORMATION, CONTACT OFER SHACHAM FROM THE STANFORD VLSI GROUP
//  THIS VERSION OF GENESIS2 IS NOT TO BE USED FOR ANY COMMERCIAL USE
//---------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11012 $ --- $Date: 2012/09/13 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/ir.stanford.edu/users/a/j/ajdupree/assignment3/verif/smpl_sb.vp
//  Source template: smpl_sb
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter Radix 	= 10
// Parameter Vertices 	= 3
// Parameter Filename 	= sb_log/smpl_sb.log
// Parameter Axis 	= 3
// Parameter SigFig 	= 24
// Parameter Colors 	= 3
// Parameter PipelineDepth 	= 4
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/*
 * sampl_sb monitor
 * 
 *   Sample Test Function Score Board
 *    
 *   This module calls a DPI function 
 *   to see if the sample test is correct.
 *   
 *   Output error to file and stdout
 * 
 *   Author: John Brunhaver, Ofer Shacham
 *   Created:          09/21/09
 *   Last Updated:     10/06/10
 *
 *   Copyright 2009 <jbrunhaver@gmail.com>  <shacham@stanford.edu> 
 */
 
  /****************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 22, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
// SigFig (_GENESIS2_INHERITANCE_PRIORITY_) = 24
//
// Radix (_GENESIS2_INHERITANCE_PRIORITY_) = 10
//
// Vertices (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// Axis (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// Colors (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// PipelineDepth (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// Filename (_GENESIS2_INHERITANCE_PRIORITY_) = sb_log/smpl_sb.log
//


import "DPI" pure function int rastBBox_stest_check( int   v0_x, //uPoly
						int   v0_y,      //uPoly
						int   v1_x,      //uPoly
						int   v1_y,      //uPoly
						int   v2_x,      //uPoly
						int   v2_y,      //uPoly
						int   v3_x,      //uPoly
						int   v3_y,      //uPoly
						int   q,         //uPoly
						int   s_x,       //SAMPLE 
						int   s_y,       //SAMPLE
						int   hit        //HIT
						);   



module smpl_sb_unq1 
(
  input logic signed   [24-1:0]  poly_R16S[3-1:0][3-1:0],  // 4 Sets X,Y Fixed Point Values
  input logic unsigned [24-1:0]  color_R16U[3-1:0],          // 4 Sets X,Y Fixed Point Values
  input logic                        isQuad_R16H,                     // Is Poly Quad?
  input logic                        validSamp_R16H,
  input logic signed   [24-1:0]  sample_R16S[1:0],
			 
  input logic                        clk,                // Clock 
  input logic                        rst,                // Reset
			 
  input logic signed [24-1:0]   hit_R18S[3-1:0],
  input logic signed [24-1:0]   color_R18U[3-1:0],
  input                             hit_valid_R18H 
);
		   

   //Pipe Signals for Later Evaluation
   logic signed   [24-1:0]  poly_RnnS[3-1:0][3-1:0];    // 4 Sets X,Y Fixed Point Values
   logic unsigned [24-1:0]  color_RnnU[3-1:0];
   logic 		        isQuad_RnnH;                       // Is Poly Quad?
   logic 		        validSamp_RnnH;
   logic signed   [24-1:0]  sample_RnnS[1:0];             //
   //Pipe Signals for Later Evaluation

   //Helper Signals
   int 		       one;
   int 		       file;
   
   assign one = 1 ;
   //Helper Signals



   
   initial begin
      file = $fopen("sb_log/smpl_sb.log","w");
   end

   always @(posedge clk) begin
      assert( rst | ( 3==3 && !isQuad_RnnH ) || 3==4 )
	else $error( "time=%10t ERROR: Saw a quad in a non-quad system", $time );
   end
   
   
   //Check if Sample in uPoly test is correct
   always @(posedge clk) begin
      #100;
       if(validSamp_RnnH 
	   &&
	   one !=  rastBBox_stest_check( int'(poly_RnnS[0][0]), //uPoly
				         int'(poly_RnnS[0][1]), //uPoly
					 int'(poly_RnnS[1][0]), //uPoly
					 int'(poly_RnnS[1][1]), //uPoly
					 int'(poly_RnnS[2][0]), //uPoly
					 int'(poly_RnnS[2][1]), //uPoly
					 int'(poly_RnnS[3-1][0]), //uPoly
					 int'(poly_RnnS[3-1][1]), //uPoly
					 int'(isQuad_RnnH)    , //uPoly	
					 int'(sample_RnnS[0]) , //SAMPLE 
					 int'(sample_RnnS[1]) , //SAMPLE
					 int'(hit_valid_R18H)   //IS HIT
				      )) begin

	    $fwrite( file , "@%0t: Sample Test ERROR!!!!\n\t\t" , $time );
	    $fwrite( file , "uP.v_0.x: %f\t" ,  1.0 * poly_RnnS[0][0] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_0.y: %f\t" ,  1.0 * poly_RnnS[0][1] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_1.x: %f\t" ,  1.0 * poly_RnnS[1][0] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_1.y: %f\t" ,  1.0 * poly_RnnS[1][1] / ( 128'd1 << 10 )    );

		 $fwrite( file , "\n\t\t" );		 
	    $fwrite( file , "uP.v_2.x: %f\t" ,  1.0 * poly_RnnS[2][0] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_2.y: %f\t" ,  1.0 * poly_RnnS[2][1] / ( 128'd1 << 10 )    );
	    
	    if( isQuad_RnnH ) begin
	       $fwrite( file , "uP.v_3.x: %f\t" ,  1.0 * poly_RnnS[3-1][0] / ( 128'd1 << 10 )    );
	       $fwrite( file , "uP.v_3.y: %f\t" ,  1.0 * poly_RnnS[3-1][1] / ( 128'd1 << 10 )    );
	    end

	    $fwrite( file , "\n\t\t" );

	    $fwrite( file , "sample.x:%f\t",   1.0 * sample_RnnS[0] / ( 128'd1 << 10 )    );
	    $fwrite( file , "sample.y:%f\t",   1.0 * sample_RnnS[1] / ( 128'd1 << 10 )    );
	    $fwrite( file , "hit:%b\n" , hit_valid_R18H );

	  
	  assert( 0 ) else $error( "time=%10t ERROR: Sample Test Check Failed", $time );
       end
   end



   
/* Pipe Required Signals */
	dff3_unq7  d_01 (
					 .in(poly_R16S) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(poly_RnnS));
					 
	dff2_unq9  d_02 (
					 .in(color_R16U) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(color_RnnU));
	
	dff2_unq10  d_03 (
					 .in(sample_R16S) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(sample_RnnS));				 
					 						
	
	dff_unq15  d_04 (
					 .in({validSamp_R16H, isQuad_R16H}) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out({validSamp_RnnH, isQuad_RnnH}));	
					 
/* Pipe Required Signals */

   
endmodule 
