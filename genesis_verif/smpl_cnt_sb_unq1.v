//
//---------------------------------------------------------------------------
//  THIS FILE WAS AUTOMATICALLY GENERATED BY THE STANFORD GENESIS2 ENGINE
//  FOR MORE INFORMATION, CONTACT OFER SHACHAM FROM THE STANFORD VLSI GROUP
//  THIS VERSION OF GENESIS2 IS NOT TO BE USED FOR ANY COMMERCIAL USE
//---------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11012 $ --- $Date: 2012/09/13 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/ir.stanford.edu/users/a/j/ajdupree/assignment3/verif/smpl_cnt_sb.vp
//  Source template: smpl_cnt_sb
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter Radix 	= 10
// Parameter Vertices 	= 3
// Parameter Filename 	= sb_log/smpl_cnt_sb.log
// Parameter Axis 	= 3
// Parameter SigFig 	= 24
// Parameter Colors 	= 3
// Parameter PipelineDepth 	= 5
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/*
 * smpl_cnt_sb
 * 
 *  This is a sample count scoreboard.  It checks
 *  to make sure that each polygon generates
 *  the correct number of fragments.
 * 
 *  Combined with the correct sample test scoreboard 
 *  both scoreboards should detect if a micropolygon
 *  generates any incorrect fragments
 * 
 * 
 */
 
  /****************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 22, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
// SigFig (_GENESIS2_INHERITANCE_PRIORITY_) = 24
//
// Radix (_GENESIS2_INHERITANCE_PRIORITY_) = 10
//
// Vertices (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// Axis (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// Colors (_GENESIS2_INHERITANCE_PRIORITY_) = 3
//
// PipelineDepth (_GENESIS2_INHERITANCE_PRIORITY_) = 5
//
// Filename (_GENESIS2_INHERITANCE_PRIORITY_) = sb_log/smpl_cnt_sb.log
//

import "DPI" pure function int rastBBox_check( int   v0_x,   //uPoly
					  int   v0_y,        //uPoly
					  int   v1_x,        //uPoly
					  int   v1_y,        //uPoly
					  int   v2_x,        //uPoly
					  int   v2_y,        //uPoly
					  int   v3_x,        //uPoly
					  int   v3_y,        //uPoly
					  int   q,           //uPoly
					  int   hits,        //Number of Samples in uPoly
					  int   ss_w_lg2,    //Subsample
					  int   screen_w,    //Screen
					  int   screen_h,    //Screen
					  int   r_shift,     //Config
					  int   r_val        //Congig 
					  );
   


import "DPI" pure function int  rastBBox_jhash_jit_fix_check( 
							      int s_x,
							      int s_y,
							      int ss_w_lg2,
							      int jitter_x,
							      int jitter_y,
							      int s_j_x,
							      int s_j_y);

module smpl_cnt_sb_unq1 
(
			    
  input logic signed   [24-1:0]  poly_R16S[3-1:0][3-1:0],  // 4 Sets X,Y Fixed Point Values
  input logic unsigned [24-1:0]  color_R16U[3-1:0],          // 4 Sets X,Y Fixed Point Values
  input logic                        isQuad_R16H,                     // Is Poly Quad?
  input logic                        validSamp_R16H,
  input logic signed   [24-1:0]  sample_R16S[1:0],
			 
  input logic                        clk,                // Clock 
  input logic                        rst,                // Reset
			 
  input logic signed [24-1:0]   hit_R18S[3-1:0],
  input logic signed [24-1:0]   color_R18U[3-1:0],
  input logic                       hit_valid_R18H,
		   
  input logic        [24-1:0]  screen_RnnnnS[1:0],      // Screen Size
  input logic  	     [3:0]         subSample_RnnnnU,    // Flag for subsample


  input logic signed [24-1:0]   s_x_RnnS ,
  input logic signed [24-1:0]   s_y_RnnS ,
  input logic signed [7:0]    jitter_x_RnnS ,
  input logic signed [7:0]    jitter_y_RnnS,
  input logic signed [24-1:0]   s_j_x_RnnS ,
  input logic signed [24-1:0]   s_j_y_RnnS 
		   
 );
	

   //Pipe Signals for Later Evaluation
   logic signed   [24-1:0]  poly_RnnS[3-1:0][3-1:0];    // 4 Sets X,Y Fixed Point Values
   logic signed   [24-1:0]  poly_Rn1S[3-1:0][3-1:0];    // 4 Sets X,Y Fixed Point Values
   logic unsigned [24-1:0]  color_RnnU[3-1:0];
   logic 		        isQuad_RnnH;                       // Is Poly Quad?
   logic 		        isQuad_Rn1H;                       // Is Poly Quad?
   logic 		        validSamp_RnnH;
   logic signed   [24-1:0]  sample_RnnS[1:0];             //
   //Pipe Signals for Later Evaluation

   //Helper Signals
   int 		       file;
   int 		       one;
   int 		       ss_w_lg2;
   assign one = 1 ;
   //Helper Signals
    
   //Bench Logic
   int   hit_count;
   int   hit_count_next;
   logic incr;
   logic keep;
   logic reset_to_zero;
   logic reset_to_one;
   //Bench Logic

     
   initial begin
      file = $fopen("sb_log/smpl_cnt_sb.log","w");
   end

   always_comb begin
      unique case( 1'b1 )
	( subSample_RnnnnU[0] ): ss_w_lg2 = 3;
	( subSample_RnnnnU[1] ): ss_w_lg2 = 2;
	( subSample_RnnnnU[2] ): ss_w_lg2 = 1;
	( subSample_RnnnnU[3] ): ss_w_lg2 = 0;
      endcase
   end


   always @( posedge clk ) begin
      #10;
      if( ~rst ) begin
	 if( one != rastBBox_jhash_jit_fix_check( 
					   s_x_RnnS ,
					   s_y_RnnS ,
					   ss_w_lg2 ,
					   int'( { 24'h000000 , jitter_x_RnnS} ) ,
					   int'( { 24'h000000 , jitter_y_RnnS} ) ,
					   s_j_x_RnnS,
					   s_j_y_RnnS	  ) ) begin
	    assert( 0 ) else $error( "time=%10t ERROR: Hash Check in Rast Failed", $time) ;
	 end
      end
   end


   

   

   //Check that the Number of Hits is Correct
   always @( posedge clk ) begin
      #10;
      if( reset_to_zero && validSamp_RnnH ) begin
	 if( one != rastBBox_check( 
			int'(poly_RnnS[0][0]),   //uPoly
			int'(poly_RnnS[0][1]),   //uPoly
			int'(poly_RnnS[1][0]),   //uPoly
			int'(poly_RnnS[1][1]),   //uPoly
			int'(poly_RnnS[2][0]),   //uPoly
			int'(poly_RnnS[2][1]),   //uPoly
			int'(poly_RnnS[3-1][0]),   //uPoly
			int'(poly_RnnS[3-1][1]),   //uPoly 
			int'(isQuad_RnnH)    ,   //uPoly	
			hit_count,               //Number of Samples in uPoly
			ss_w_lg2,                //Subsample
			int'(screen_RnnnnS[0] ), //Screen
			int'(screen_RnnnnS[1] ), //Screen
			10,                   //Config
			int'( 128'd1 << 10 )  //Congig 
			)) begin


	    $fwrite( file , "@%0t: Sample Test ERROR!!!!\n\t\t" , $time );
	    $fwrite( file , "uP.v_0.x: %f\t" ,  1.0 * poly_Rn1S[0][0] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_0.y: %f\t" ,  1.0 * poly_Rn1S[0][1] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_1.x: %f\t" ,  1.0 * poly_Rn1S[1][0] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_1.y: %f\t" ,  1.0 * poly_Rn1S[1][1] / ( 128'd1 << 10 )    );

		 $fwrite( file , "\n\t\t" );		 
	    $fwrite( file , "uP.v_2.x: %f\t" ,  1.0 * poly_Rn1S[2][0] / ( 128'd1 << 10 )    );
	    $fwrite( file , "uP.v_2.y: %f\t" ,  1.0 * poly_Rn1S[2][1] / ( 128'd1 << 10 )    );
	    
	    if( isQuad_Rn1H ) begin
	       $fwrite( file , "uP.v_3.x: %f\t" ,  1.0 * poly_Rn1S[3-1][0] / ( 128'd1 << 10 )    );
	       $fwrite( file , "uP.v_3.y: %f\t" ,  1.0 * poly_Rn1S[3-1][1] / ( 128'd1 << 10 )    );
	    end

	    $fwrite( file , "\n" );
	 
	    assert( 0 ) else $error( "time=%10t ERROR: RAST Check Failed", $time) ;
	 end
      end 
   end

	 

   //Sample hit Counter for 

   //hit_count_next holds the number of hits in uPoly 106 so far
	dff_unq13  dc (
					 .in(hit_count_next) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(hit_count));
 
   always_comb begin
   
      reset_to_zero = (poly_Rn1S != poly_RnnS) ; //New Poly
      reset_to_one = reset_to_zero && hit_valid_R18H ; //New Poly with hit
      incr = hit_valid_R18H ;
      keep = ~hit_valid_R18H ;
    
      priority case( 1'b1 )
	(reset_to_one): hit_count_next = 1;
	(reset_to_zero): hit_count_next = 0;
	(incr): hit_count_next = hit_count + 1 ;
	(keep): hit_count_next = hit_count ;
	default: hit_count_next = 0;
      endcase // case ( 1'b1 )
   end
   //Sample Hit Counter

   //Pipe Micropolygon Along
	dff3_unq7  d_01 (
					 .in(poly_R16S) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(poly_RnnS));
					 
					 
	dff3_unq6  d_011 (
					 .in(poly_R16S) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(poly_Rn1S));
					 
					 
	dff2_unq9  d_02 (
					 .in(color_R16U) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(color_RnnU));
	
	dff2_unq10  d_03 (
					 .in(sample_R16S) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(sample_RnnS));				 
					 						
	
	dff_unq15  d_04 (
					 .in({validSamp_R16H, isQuad_R16H}) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out({validSamp_RnnH, isQuad_RnnH}));	


	
	dff_unq16  d_041 (
					 .in(isQuad_R16H) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(isQuad_Rn1H));					 
					
      
endmodule
